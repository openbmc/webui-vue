{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "328673a9_f10932e1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-06-20T16:48:21Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/71986 needs to go first correct?",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e52785d6_3f1649c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-20T21:39:45Z",
      "side": 1,
      "message": "\u003e https://gerrit.openbmc.org/c/openbmc/bmcweb/+/71986 needs to go first correct?\n\nIndeed, without that bmcweb patch webui wouldn\u0027t be able to use the websocket-based features (IP KVM, SOL, VM) so it would be a regression.\n\nI\u0027m working on incorporating the feedback I got there.",
      "parentUuid": "328673a9_f10932e1",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "565a328b_3ef13b87",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-12T06:12:22Z",
      "side": 1,
      "message": "Gunnar, the bmcweb patch has been merged.",
      "parentUuid": "e52785d6_3f1649c1",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b528fcdc_341d9cb7",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T21:55:21Z",
      "side": 1,
      "message": "nitpick:\n\nThe SessionService URI is actually a known value in the specification, so we don\u0027t need to go to service root first.",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d6042d3_0fc70c65",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-27T22:32:34Z",
      "side": 1,
      "message": "\u003e nitpick:\n\u003e \n\u003e The SessionService URI is actually a known value in the specification, so we don\u0027t need to go to service root first.\n\nhttps://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.20.1.html#redfish-login-sessions tells me\n```\nTo establish a session, find the URI in either:\n\n    The session service\u0027s Sessions property.\n    The service root\u0027s links property under the Sessions property.\n```\n\"find the URI\" means an extra request is needed either way or do I get it wrong?",
      "parentUuid": "b528fcdc_341d9cb7",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6804a2fb_0d6fff32",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T23:06:26Z",
      "side": 1,
      "message": "That\u0027s old language in the spec, and while still technically correct, is no longer necessary (since I think redfish 1.6?).\n\nDocumentation from the CSDL:\nhttps://github.com/DMTF/Redfish-Publications/blob/5b217908b5378b24e4f390c063427d7a707cd308/csdl/SessionService_v1.xml#L62",
      "parentUuid": "8d6042d3_0fc70c65",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9032220e_17d44403",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-27T23:31:11Z",
      "side": 1,
      "message": "\u003e That\u0027s old language in the spec, and while still technically correct, is no longer necessary (since I think redfish 1.6?).\n\u003e \n\u003e Documentation from the CSDL:\n\u003e https://github.com/DMTF/Redfish-Publications/blob/5b217908b5378b24e4f390c063427d7a707cd308/csdl/SessionService_v1.xml#L62\n\nOK, wasn\u0027t aware of that, noted.",
      "parentUuid": "6804a2fb_0d6fff32",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37c8082e_e0371752",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-02T20:16:45Z",
      "side": 1,
      "message": "I used SessionCollection URI here, hope you meant that as the POST goes there, not to the SessionService. https://github.com/DMTF/Redfish-Publications/blob/5b217908b5378b24e4f390c063427d7a707cd308/csdl/SessionCollection_v1.xml#L57",
      "parentUuid": "9032220e_17d44403",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16e4c53f_0ad5640b",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-12T00:07:56Z",
      "side": 1,
      "message": "SessionCollection URI is also fixed in the spec, which means we don\u0027t need to read or store it.",
      "parentUuid": "37c8082e_e0371752",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dedc4f59_355750fe",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-12T06:12:22Z",
      "side": 1,
      "message": "Of course I checked it after your hint and used in the patch. I was just slightly confused as you mentioned SessionService in the previous message. Guess this is resolved.",
      "parentUuid": "16e4c53f_0ad5640b",
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24c70950_90640c45",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T21:55:21Z",
      "side": 1,
      "message": "I suspect we could just keep the old paths, and ignore x-auth-token entirely?",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 56
      },
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "550c54b4_26a49055",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-27T22:32:34Z",
      "side": 1,
      "message": "\u003e I suspect we could just keep the old paths, and ignore x-auth-token entirely?\n\nIt provides compatibility to standard Redfish and offers way forward to make webui-vue usable on non-bmcweb implementations. It doesn\u0027t increase code complexity considerably, it\u0027s all nicely contained in this single file. So why not?",
      "parentUuid": "24c70950_90640c45",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 56
      },
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65533b4d_a7aa8794",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-27T22:52:28Z",
      "side": 1,
      "message": "\u003e \u003e I suspect we could just keep the old paths, and ignore x-auth-token entirely?\n\u003e \n\u003e It provides compatibility to standard Redfish and offers way forward to make webui-vue usable on non-bmcweb implementations. It doesn\u0027t increase code complexity considerably, it\u0027s all nicely contained in this single file. So why not?\n\nAlso it provides (limited because websocket features wouldn\u0027t be available) compatibility with bmcweb versions where non-standard cookie auth via standard endpoint is not enabled.\n\nAnd in general I can not see how making webui-vue more compatible with standard Redfish can be undesired especially if it doesn\u0027t increase complexity much.",
      "parentUuid": "550c54b4_26a49055",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 56
      },
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "647d090e_1220a918",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T23:06:26Z",
      "side": 1,
      "message": "\u003e why not?\n\nYou\u0027re storing fully qualified secrets in local storage available to javascript\n\nDocumentation:\nhttps://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#local-storage\n\n```Due to the browser\u0027s security guarantees it is appropriate to use local storage where access to the data is not assuming authentication or authorization.```\n\ngiven this is literally an auth token, it assumes authentication.\n\nAlso\n\n```Do not store session identifiers in local storage as the data is always accessible by JavaScript. Cookies can mitigate this risk using the httpOnly flag.```\n\nThat second one is pretty concrete that we shouldn\u0027t do this.",
      "parentUuid": "65533b4d_a7aa8794",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 56
      },
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7475ba8f_67ba99b8",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-27T23:31:11Z",
      "side": 1,
      "message": "\u003e \u003e why not?\n\u003e \n\u003e You\u0027re storing fully qualified secrets in local storage available to javascript\n\nI agree this is less secure than an HttpOnly cookie, no arguing that. But this is the only way to support page reloads when using Redfish-standard token auth.\n\nDo you think webui-vue shouldn\u0027t be doing this when talking to non-bmcweb Redfish implementations? Then page reloads would require logging in again.\n\n\u003e ```Do not store session identifiers in local storage as the data is always accessible by JavaScript. Cookies can mitigate this risk using the httpOnly flag.```\n\u003e \n\u003e That second one is pretty concrete that we shouldn\u0027t do this.\n\nBut other Redfish implementations won\u0027t be giving us cookies, does it mean we should insist on worse UX with them just to enforce some general ideas about security?",
      "parentUuid": "647d090e_1220a918",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 56
      },
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48978512_0a090fb4",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T23:50:46Z",
      "side": 1,
      "message": "\u003e \u003e \u003e why not?\n\u003e \u003e \n\u003e \u003e You\u0027re storing fully qualified secrets in local storage available to javascript\n\u003e \n\u003e I agree this is less secure than an HttpOnly cookie, no arguing that. But this is the only way to support page reloads when using Redfish-standard token auth.\n\nRight, which is one of the several reasons we use cookie auth.  If the goal is to make webui-vue generically work on non-openbmc redfish instances, that\u0027s certainly a good goal, and I suspect you\u0027d get support, but that\u0027s a significantly different patch, and why I\u0027d recommend splitting up the goals.\n\n\u003e \n\u003e Do you think webui-vue shouldn\u0027t be doing this when talking to non-bmcweb Redfish implementations? Then page reloads would require logging in again.\n\n\n\nThe reason I asked you to break up this patch into two is because you\u0027re combining two changes:\n1. We should use a (slightly) non standard redfish login that passes cookies, but can also give us the Redfish Session id with the existing levels of security and capability we have today.\n2. We should be arbitrarily compatible with any Redfish server, and disregard owasp security recommendations to do it.\n\nThese are both equally valid to talk about, and certainly could be discussed, but trying to do both at the same time in the same commit is making this harder than it needs to be.\n\n\u003e \n\u003e \u003e ```Do not store session identifiers in local storage as the data is always accessible by JavaScript. Cookies can mitigate this risk using the httpOnly flag.```\n\u003e \u003e \n\u003e \u003e That second one is pretty concrete that we shouldn\u0027t do this.\n\u003e \n\u003e But other Redfish implementations won\u0027t be giving us cookies, does it mean we should insist on worse UX with them just to enforce some general ideas about security?\n\nFrankly, yes.  If making things compatible with non-openbmc webservers is a goal, I\u0027d probably start with making a feature flag that we could set for \"we should be compatible\" that implementations could set that turns on local storage, disables the console and kvm etc.  That\u0027s just a strawman, but again, that discussion should happen in a different patch (ideally one where we\u0027ve actually tested this on another Redfish server).  This patch should stay focused on trying to move OpenBMC over to use /redfish/v1/SessionService to login.",
      "parentUuid": "7475ba8f_67ba99b8",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 56
      },
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c652e025_c05891b8",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-02T20:16:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48978512_0a090fb4",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 56
      },
      "revId": "9eaaa8faa1593f1bd3d8ed369e225636b6239580",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}