{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f8d24633_5497ab06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-12T19:55:43Z",
      "side": 1,
      "message": "Corresponding bmcweb change: https://gerrit.openbmc.org/c/openbmc/bmcweb/+/71986",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78431fb0_fe013cee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T06:59:04Z",
      "side": 1,
      "message": "Hello,\nThank you for the review. Please see more inline.",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "315ad035_308bfa62",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001557
      },
      "writtenOn": "2024-06-13T04:48:49Z",
      "side": 1,
      "message": "Storing tokens in localStorage has security implications, and it is generally not recommended for sensitive information like authentication tokens. We can stored in cookies ?",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abf57211_d6f758a2",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T06:59:04Z",
      "side": 1,
      "message": "Please clarify what specific security implications you have in mind. Probably reference some reputable best practicies document or something.\nCookies are meant to be set and received by the server. Here we use HTTP Headers for authentication, the server doesn\u0027t expect receiving any cookies from us (as per the Redfish specification!).\nAnd how exactly is Local Storage less secure for this purpose at all anyhow?",
      "parentUuid": "315ad035_308bfa62",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d860f41_aa227e3f",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-26T02:32:38Z",
      "side": 1,
      "message": "\u003e Probably reference some reputable best practicies document or something.\n\nHow about:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#scope\n\n\"Due to potential concurrent access from separate windows/threads, data stored using localStorage may be susceptible to shared access issues (such as race-conditions) and should be considered non-locking (Web Storage API Spec).\"\n\nFWIW, that\u0027s the document (an older revision obviously) that was quoted when we originally built out cookie management.",
      "parentUuid": "abf57211_d6f758a2",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d33674e_3859b485",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-26T08:46:04Z",
      "side": 1,
      "message": "\u003e \u003e Probably reference some reputable best practicies document or something.\n\u003e \n\u003e How about:\n\u003e https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#scope\n\u003e \n\u003e \"Due to potential concurrent access from separate windows/threads, data stored using localStorage may be susceptible to shared access issues (such as race-conditions) and should be considered non-locking (Web Storage API Spec).\"\n\nSivaprabu mentioned some \"security implications\", not potential confusion from changing the storage from another window or thread. Also, the quoted statement is true for cookies as well to which Sivaprabu contrasted localStorage. If we switch to sessionStorage then it would be possible to have different users logged in on same BMC from same web browser at the same time but it will break session when the window is reloaded (or browser is restarted) and also this concurrent tabs for different users will stop working anyway when the cookie-auth via the standard endpoint is implemented.\n\nI can not see a practical suggestion here.\n\n\u003e FWIW, that\u0027s the document (an older revision obviously) that was quoted when we originally built out cookie management.\n\nI agree this is a very good document, thank you for linking me to it. I see it provides reliable and relevant information about all the important features. It\u0027s the job of a particular application developer to apply that knowledge to the particular case.",
      "parentUuid": "8d860f41_aa227e3f",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0264b8d0_09a587ee",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T21:49:45Z",
      "side": 1,
      "message": "\u003e \u003e \u003e Probably reference some reputable best practicies document or something.\n\u003e \u003e \n\u003e \u003e How about:\n\u003e \u003e https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#scope\n\u003e \u003e \n\u003e \u003e \"Due to potential concurrent access from separate windows/threads, data stored using localStorage may be susceptible to shared access issues (such as race-conditions) and should be considered non-locking (Web Storage API Spec).\"\n\u003e \n\u003e Sivaprabu mentioned some \"security implications\", not potential confusion from changing the storage from another window or thread. Also, the quoted statement is true for cookies as well\n\nI don\u0027t believe it is. The cookie will be valid in both contexts, so even if the cookie changes, the different is \"atomic\".  The XSRF is read per-session, so it doesn\u0027t suffer from concurrent access.\n\n\u003e to which Sivaprabu contrasted localStorage. If we switch to sessionStorage then it would be possible to have different users logged in on same BMC from same web browser at the same time but it will break session when the window is reloaded (or browser is restarted) \n\nBetween this tradeoff, I will take what we have.  refreshing the console is a very common operation.  I don\u0027t know if I\u0027ve ever seen a request for different users to be logged into the same BMC from the same browser.  I don\u0027t know if I\u0027ve seen any other site implement this either.  Generally logins are per user-browser.\n\n\n\u003e and also this concurrent tabs for different users will stop working anyway when the cookie-auth via the standard endpoint is implemented.\n\nWhich is another good reason to retain cookie auth, just using the \"prviate\" nonstandard interface.\n\n\u003e \n\u003e I can not see a practical suggestion here.\n\n1. Keep the status quo.  Yes, it\u0027s not great, but we\u0027ve survived this long?\n2. Keep cookie auth basically as it exists (with the two secrets) and make SessionService POST return a cookie if XSR-requested-by is set.  Thought that\u0027s where we landed with this in the other thread, but I guess not?\n\n\u003e \n\u003e \u003e FWIW, that\u0027s the document (an older revision obviously) that was quoted when we originally built out cookie management.\n\u003e \n\u003e I agree this is a very good document, thank you for linking me to it. I see it provides reliable and relevant information about all the important features. It\u0027s the job of a particular application developer to apply that knowledge to the particular case.\n\n\n\n\u003e the server doesn\u0027t expect receiving any cookies from us\n\nRedfish doesn\u0027t define /login either, so lets treat this as an incremental step toward the goal.  The advantage of this is also that it would be pretty trivial to implement a mode that did something like \"If an openbmc cookie is present, use that, if not, disable websocket things, and use the xtoken\"",
      "parentUuid": "9d33674e_3859b485",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "797ea59a_04810419",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T21:55:21Z",
      "side": 1,
      "message": "but lets start with this just handling cookies from SessionService POST in the same way we handle them with /login (because obviously a simple URI change doesn\u0027t change any security properties), and we can look at using the x-auth-token in a later patch if we want, but in there, I don\u0027t actually see x-auth-token used anywhere to send back to bmc, it\u0027s just stored.",
      "parentUuid": "0264b8d0_09a587ee",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4d6430c_ad1bd550",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-27T22:32:34Z",
      "side": 1,
      "message": "\u003e Keep the status quo. Yes, it\u0027s not great, but we\u0027ve survived this long?\n\nIt\u0027s just wrong that webui can not know which session it actually created using `/login`. My immediate motivation is that without knowing which session is used it can not get `Roles` but also it doesn\u0027t allow to highlight current session in the list of sessions and there might be some other negative implications. And all that for no good reason as this patch shows webui can be easily switched to using standard Redfish and the code becomes just better by that.\n\n\u003e Keep cookie auth basically as it exists (with the two secrets) and make SessionService POST return a cookie if XSR-requested-by is set. Thought that\u0027s where we landed with this in the other thread, but I guess not?\n\nI never said I liked the idea of paying attention to XSR-requested-by but I also have forgotten to mention why I exactly I implemented optional query parameter instead in the bmcweb patch, sorry. I think another browser-based UI has every right to send XSR requests and expect Redfish-conformant behaviour. Those wanting special OpenBMC sauce should be explicit aboout it.\n\n\u003e but lets start with this just handling cookies from SessionService POST in the same way we handle them with /login (because obviously a simple URI change doesn\u0027t change any security properties)\n\nThis is what this patch does when it gets the cookie.\n\n\u003e and we can look at using the x-auth-token in a later patch if we want, but in there, I don\u0027t actually see x-auth-token used anywhere to send back to bmc, it\u0027s just stored.\n\n`api.set_auth_token(token);` makes \"axios\" add that header to every request that follows.\n\nI do not see a reason to implement the token based authentication in a separate patch, this one is simple enough and provides both cookie-based if available and token based if not.",
      "parentUuid": "797ea59a_04810419",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12c08e78_6914e3e0",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T23:06:26Z",
      "side": 1,
      "message": "\u003e \u003e Keep the status quo. Yes, it\u0027s not great, but we\u0027ve survived this long?\n\u003e \n\u003e It\u0027s just wrong that webui can not know which session it actually created using `/login`. My immediate motivation is that without knowing which session is used it can not get `Roles` but also it doesn\u0027t allow to highlight current session in the list of sessions and there might be some other negative implications.\n\nI understand, the fact that other things have been implemented is blocking new implementation.  I get it.\n\n\u003e And all that for no good reason as this patch shows webui can be easily switched to using standard Redfish and the code becomes just better by that.\n\n\"no good reason\" meaning that KVM and virtual media need to work?  I\u0027m confused by your statement, because as-is, what\u0027s written here (if we didn\u0027t support cookies) would break virtual media.\n\n\u003e \n\u003e \u003e Keep cookie auth basically as it exists (with the two secrets) and make SessionService POST return a cookie if XSR-requested-by is set. Thought that\u0027s where we landed with this in the other thread, but I guess not?\n\u003e \n\u003e I never said I liked the idea of paying attention to XSR-requested-by but I also have forgotten to mention why I exactly I implemented optional query parameter instead in the bmcweb patch, sorry. I think another browser-based UI has every right to send XSR requests and expect Redfish-conformant behaviour.\n\nSorry, I typed the wrong header: X-Requested-With\nIf this hypothetical UI is sending this header, they\u0027ve already gone beyond the redfish specification which mentions nothing of this header.  note, webui-vue explicitly sets this header to work around places where Redfish the protocol isn\u0027t fully compatible with browsers.  If this causes an actual impact to a known browser-based UI that isn\u0027t bmcweb, lets talk about it, but for the moment, I\u0027d like to simplify both the code here (which already sets that header), and the code in bmcweb to use a single header.\n\nFWIW, bmcweb sets anti XSS headers, so unless this UI is on the BMC, we\u0027re talking about a hypothetical UI that can\u0027t really exist anyway, so logging in is the least of the problems.\n\n\u003e Those wanting special OpenBMC sauce should be explicit aboout it.\n\u003e \n\u003e \u003e but lets start with this just handling cookies from SessionService POST in the same way we handle them with /login (because obviously a simple URI change doesn\u0027t change any security properties)\n\u003e \n\u003e This is what this patch does when it gets the cookie.\n\nI see it also parsing out the X-Auth-Token and putting it in local storage?\n\n\u003e \n\u003e \u003e and we can look at using the x-auth-token in a later patch if we want, but in there, I don\u0027t actually see x-auth-token used anywhere to send back to bmc, it\u0027s just stored.\n\u003e \n\u003e `api.set_auth_token(token);` makes \"axios\" add that header to every request that follows.\n\u003e \n\u003e I do not see a reason to implement the token based authentication in a separate patch, this one is simple enough and provides both cookie-based if available and token based if not.\n\nI do see a reason.",
      "parentUuid": "f4d6430c_ad1bd550",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aa51629_e80e0ba7",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T23:08:28Z",
      "side": 1,
      "message": "See reason below.",
      "parentUuid": "12c08e78_6914e3e0",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06ef5561_e24125a2",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-27T23:31:11Z",
      "side": 1,
      "message": "\u003e See reason below.\n\nI\u0027m not sure I can follow. I _do_ keep the status quo when cookie is provided. In this case (talking to bmcweb) the code in the patch tries to parse the token from the response headers but it doesn\u0027t actually use it for anything, it doesn\u0027t set it, doesn\u0027t store it anywhere, doesn\u0027t do a thing with it. I do not see how it can harm, and I see how it can help (webui-vue talking to non-bmcweb Redfish servers). I do /not/ propose to merge this webui-vue patch before bmcweb starts giving cookie to webui-vue when creating a session via the standard endpoint.\n\nRe X-Requested-With, I see how my impression about this idea was wrong. I\u0027ll rework both this patch and the patch to bmcweb to just use that in the next iteration, thank you.",
      "parentUuid": "0aa51629_e80e0ba7",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03a32da0_926c6cd4",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-27T23:50:46Z",
      "side": 1,
      "message": "\u003e doesn\u0027t store it anywhere\n\nIt stores it on the line this code is referencing.\n\n```\nlocalStorage.setItem(\u0027xAuthToken\u0027, token);\n```",
      "parentUuid": "06ef5561_e24125a2",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60853c1e_c1dad23c",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-28T08:53:28Z",
      "side": 1,
      "message": "\u003e \u003e doesn\u0027t store it anywhere\n\u003e \n\u003e It stores it on the line this code is referencing.\n\u003e \n\u003e ```\n\u003e localStorage.setItem(\u0027xAuthToken\u0027, token);\n\u003e ```\n\nYou quoted out of context, it was \" In this case (talking to bmcweb) the code ... doesn\u0027t store it anywhere \". The line from the patch you mention is conditional on not having the cookie! It\u0027s supposed to happen only when talking to other than bmcweb implementations!\n```\n      if (state.xsrfCookie \u003d\u003d\u003d undefined) {\n        api.set_auth_token(token);\n        localStorage.setItem(\u0027xAuthToken\u0027, token);\n        state.xAuthToken \u003d token;\n      }\n```\n\nSince the idea to support standard Redfish authentication mechanism feels so controversial I\u0027ll split it out in the next iteration, no problem. The first patch will switch to standard endpoint but still mandate cookies. The second will add support for token. The third will store the token in the storage. All concerns discussed separately.",
      "parentUuid": "03a32da0_926c6cd4",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a55e1189_a3563b3b",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-07-02T17:21:16Z",
      "side": 1,
      "message": "\u003e \u003e \u003e doesn\u0027t store it anywhere\n\u003e \u003e \n\u003e \u003e It stores it on the line this code is referencing.\n\u003e \u003e \n\u003e \u003e ```\n\u003e \u003e localStorage.setItem(\u0027xAuthToken\u0027, token);\n\u003e \u003e ```\n\u003e \n\u003e You quoted out of context, it was \" In this case (talking to bmcweb) the code ... doesn\u0027t store it anywhere \". The line from the patch you mention is conditional on not having the cookie!\n\u003e It\u0027s supposed to happen only when talking to other than bmcweb implementations!\n\u003e ```\n\u003e       if (state.xsrfCookie \u003d\u003d\u003d undefined) {\n\u003e         api.set_auth_token(token);\n\u003e         localStorage.setItem(\u0027xAuthToken\u0027, token);\n\u003e         state.xAuthToken \u003d token;\n\u003e       }\n\u003e ```\n\n\n\nAh, I do understand now;  That was a subtlety that wasn\u0027t apparent in the code.  This is yet another good reason to separate the patches.  Unless you\u0027ve tested against non-bmcweb backends, we should keep the code less complex for the moment until we have testing against other servers.\n\n\n\u003e \n\u003e Since the idea to support standard Redfish authentication mechanism feels so controversial I\u0027ll split it out in the next iteration, no problem. The first patch will switch to standard endpoint but still mandate cookies. The second will add support for token. The third will store the token in the storage. All concerns discussed separately.\n\nI don\u0027t know if it\u0027s controversial, but we\u0027ll need to answer questions around things like how we keep non-openbmc backends working.  How we document that while openbmc-usage is \"secure\" to owasp standards, when put into non-openbmc mode, we\u0027re no longer secure and potentially could get junk CVEs from code scanners.  Things like that.\n\nThank you for breaking the patches up.",
      "parentUuid": "60853c1e_c1dad23c",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25d8729f_05da9816",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-07-02T20:16:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a55e1189_a3563b3b",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3d4c6ca_1fd94b1e",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2024-07-15T17:03:37Z",
      "side": 1,
      "message": "Sivaprabu, any more concern here?",
      "parentUuid": "25d8729f_05da9816",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8571b7d_59633c8c",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1001557
      },
      "writtenOn": "2024-06-13T04:48:49Z",
      "side": 1,
      "message": "Kindly remove the console log",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "274af205_9263e9f4",
        "filename": "src/store/modules/Authentication/AuthenticanStore.js",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000936
      },
      "writtenOn": "2024-06-13T06:59:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8571b7d_59633c8c",
      "revId": "6c23fa45fa1e490cf61e2ddcf913444609685408",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}